@Team members:
-----------------------------------------------
-Adrion Q Arkenberg
-Alex Day
-Ed Okvath


@Specific contributions by each person:
-----------------------------------------------
-Alex Day: -Added the AbstractFactory design pattern in the form of the AdventureFactory
           -Created the start page that gives the player options on how the game should begin
           -Designed level 1 cave layout
           -Produced documentation items that correlate with tasks completed
           -Added instructions page off of home page

-Ed Okvath: -Added FlashLight class with its functionality
            -Helped debug general problems
            -Wrote parts of the overview

-Adrion Q Arkenberg: -Wrote code to save and load game, & added room tracking fxnality
                     -Documented code and added method comments
                     -Added user stories and overview.txt file in initial commit
                     -Helped design level loading system in Factory with Alex


@Time (hours) spent by each person on this assignment:
-----------------------------------------------
Alex Day: 12
Ed Okvath: 12
Adrion Q Arkenberg: 12


@CSU Honor Pledge:
-----------------------------------------------
I have not given, received, or used any unauthorized assistance.
-Adrion Q Arkenberg
-Alex Day
-Ed Okvath

@Description of Difficulty Mechanism:
------------------------------------------------
Added false keys and a flashlight in a new level(level 1). This can potentially trick
the player as well as makes the skill of item management more important as the flashlight can
help, but you can only have 2 items at a time so players must choose when to have keys, flashlights,
or treasure. Players can also get stuck if they play the level incorrectly.

@Abstract Factory design implementation:
------------------------------------------------
The abstract factory is implemented to create a cave configuration depending on a user selected level
of 0 or 1. Each adventure factory defines a cave layout and places items in the rooms according to the
programmer design. The factories also have a method that creates a saved adventure so that when a
user selects to load a saved adventure the cave is configured appropriately. The factory to use is
determined in the adventure game model facade.

@Description of other Game Enhancements:
------------------------------------------------
Added save and load functionality so users can continue their games without losing progress.
Added a new item called a flashlight that makes navigating levels a lot easier by changing the UI
to indicate what directions the user can go in.

@User Needs to Know:
------------------------------------------------
1. The game auto-saves on exit
2. Load game defaults to the beginning of level zero if nothing has been saved
3. Each level is won by bringing the treasure outside
4. Gameplay instructions are available in the start-up screen

@Special Instructions:
------------------------------------------------
How to use the flashlight:
    -Green text on the UI means there is another room in that direction
    -Red text on the UI means there is a door in that direction
    -No text on the UI means there is a wall in that direction
    -User must have the flashlight picked up in order to use it

@Saving/Loading Mechanism Explanantion:
------------------------------------------------
* AUTOSAVE FEATURE
    -Whenever the game is removed from the screen by the user (closed, back-out-of, ect),
        it is autosaved in the default sharedPreferences of the main activity.

* LOAD GAME FEATURE
    -DEFAULT (ie no saved game) The game begins just as level 1 would begin, with the items
        in their default locations and the player holding nothing.
    -INTENDED (game saved)  The game resumes from the user's save, with the player placed
        in their most-recent room, on the level of the game they were playing, with all items
        in their proper locations, both in the cave and in the player's inventory.
        loads from the saved sharedPreferences saved earlier.

* SAVE METHOD: key-value pairs
    level, #
    player, #
    item0, #
    ...
    itemN, #

    WHERE ALL '#' ARE THE ROOM NUMBERS WHERE THOSE ITEMS ARE LOCATED
    (VALUE OF '-1' IS THE PLAYER)

@Test Information:
------------------------------------------------
- # of new tests written: 6
- # of new defects found: 0
- # of defects fixed: 0
- Total # of tests run: 50
- Total # tests passed: 50

