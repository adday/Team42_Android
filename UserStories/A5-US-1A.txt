User Story 1 (8PTS): As a game player, I want to be able to choose a level of difficulty for
                    Adventure game, so that the game is more challenging.
    @Acceptance Criteria:
        -The game has at least 2 levels of difficulty: Level 0, the version from prior assignments,
            and Level 1, a new level with additional properties and behaviors.
        -Difficulty level is reflected in at least Rooms and Items.
        -The game doesn't crash or fail, and all commands work properly with each of the different
            levels of difficulty.

Split story 1-A (5PTS): As a CS 314 student, I want to refactor the game to use the Abstract Factory design
                pattern so that I can use factories to create at least 2 difficulty levels.
    @Acceptance Criteria (AC):
        -The cave creation mechanism uses the Abstract Factory pattern.
        -The abstract factory supports at least 2 levels: Level 0 is the version from prior
            assignments, and Level 1 has additional properties and behaviors.
        -A description of the mechanism that you used to support "levels of difficulty" is created.
        -The User Interfaces and Facade are adapted to allow users to select the level of difficulty.
        -The User Interfaces work either on Android or on Java (i.e. Swing).
        -UML class diagram(s) of your AdventureGame Model Java code that is involved in your
            implementation of the Abstract Factory Pattern are created.
        -New tests are written and pass. Any defects they find are fixed.
        -All previous tests run and pass.
        -Meet 'Definition of Done' (DoD), below.

    @Tasks who*(estimation/actual time):
        all*(1hr/hr) Understanding Abstract Factory Design
        alex*(4hrs/hrs) Implement Abstract Factory Design
        all*(1.5hrs/hrs) Write tests for new abstract factory implementation
        all*(1hr/hr) Fix bugs introduced by tests
        all*(1hr/hr) Ensure that DoD and rubric are both met




---------------------------------------------------------------
@ Definition of Done:
For all user stories:

    - GitHub main branch code runs with no warnings and a user can execute all commands at least using the GUI.
    - All code changes are reviewed before being merged onto the main branch (see A1, tutorial 5
        for instructions on the GitHub Pull Request Code Review System you must use for reviews)
    - All code changes are merged into the main branch

For CS314 development:

    - All work is done on individual branches with frequent commits and pushes to GitHub
        before being merged onto the main branch.
    - Commit messages include user story and task
    - All user stories and point estimates are in GitHub
    - All tasks and time estimates and actual time taken are in GitHub
    - The overview.txt file for A5 has all required items in it
